// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public static partial class StrawberryShakeClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::StrawberryShakeClient.State.StrawberryShakeClientStoreAccessor> AddStrawberryShakeClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::StrawberryShakeClient.State.StrawberryShakeClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.OnNewPaymentSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.OnNewTransactionSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.PersistPaymentMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.StrawberryShakeClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.IStrawberryShakeClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::StrawberryShakeClient.State.StrawberryShakeClientStoreAccessor>("StrawberryShakeClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("StrawberryShakeClient", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("StrawberryShakeClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.PaymentsEntity, global::StrawberryShakeClient.OnNewPayment_Payments_Payments>, global::StrawberryShakeClient.State.OnNewPayment_Payments_PaymentsFromPaymentsEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.TransactionsEntity, global::StrawberryShakeClient.OnNewTransaction_Transactions_Transactions>, global::StrawberryShakeClient.State.OnNewTransaction_Transactions_TransactionsFromTransactionsEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.PaymentsEntity, global::StrawberryShakeClient.PersistPayment_Insert_Payments_one_Payments>, global::StrawberryShakeClient.State.PersistPayment_Insert_Payments_one_PaymentsFromPaymentsEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("timestamptz"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShakeClient.Payments_insert_inputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOnNewPaymentResult>, global::StrawberryShakeClient.State.OnNewPaymentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOnNewPaymentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.IOnNewPaymentSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOnNewPaymentResult>, global::StrawberryShakeClient.State.OnNewPaymentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::StrawberryShakeClient.IOnNewPaymentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOnNewPaymentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOnNewPaymentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.OnNewPaymentSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.IOnNewPaymentSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.OnNewPaymentSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOnNewTransactionResult>, global::StrawberryShakeClient.State.OnNewTransactionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOnNewTransactionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.IOnNewTransactionSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOnNewTransactionResult>, global::StrawberryShakeClient.State.OnNewTransactionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::StrawberryShakeClient.IOnNewTransactionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOnNewTransactionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOnNewTransactionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.OnNewTransactionSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.IOnNewTransactionSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.OnNewTransactionSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IPersistPaymentResult>, global::StrawberryShakeClient.State.PersistPaymentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IPersistPaymentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.IPersistPaymentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IPersistPaymentResult>, global::StrawberryShakeClient.State.PersistPaymentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::StrawberryShakeClient.IPersistPaymentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IPersistPaymentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IPersistPaymentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.PersistPaymentMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.IPersistPaymentMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.PersistPaymentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::StrawberryShakeClient.State.StrawberryShakeClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.StrawberryShakeClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShakeClient.IStrawberryShakeClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShakeClient.StrawberryShakeClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace StrawberryShakeClient
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentResult : global::System.IEquatable<OnNewPaymentResult>, IOnNewPaymentResult
    {
        public OnNewPaymentResult(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOnNewPayment_Payments> payments)
        {
            Payments = payments;
        }

        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOnNewPayment_Payments> Payments { get; }

        public virtual global::System.Boolean Equals(OnNewPaymentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Payments, other.Payments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnNewPaymentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Payments_elm in Payments)
                {
                    hash ^= 397 * Payments_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPayment_Payments_Payments : global::System.IEquatable<OnNewPayment_Payments_Payments>, IOnNewPayment_Payments_Payments
    {
        public OnNewPayment_Payments_Payments(global::System.Double amount, global::System.String? createdAt, global::System.String creditorIBAN, global::System.String debitorIBAN, global::System.String description, global::System.Int32 id)
        {
            Amount = amount;
            CreatedAt = createdAt;
            CreditorIBAN = creditorIBAN;
            DebitorIBAN = debitorIBAN;
            Description = description;
            Id = id;
        }

        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String DebitorIBAN { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(OnNewPayment_Payments_Payments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Amount == other.Amount) && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && CreditorIBAN.Equals(other.CreditorIBAN) && DebitorIBAN.Equals(other.DebitorIBAN) && Description.Equals(other.Description) && Id == other.Id;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnNewPayment_Payments_Payments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Amount.GetHashCode();
                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                hash ^= 397 * CreditorIBAN.GetHashCode();
                hash ^= 397 * DebitorIBAN.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewPaymentResult
    {
        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOnNewPayment_Payments> Payments { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewPayment_Payments
    {
        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String DebitorIBAN { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Id { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewPayment_Payments_Payments : IOnNewPayment_Payments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewTransactionResult : global::System.IEquatable<OnNewTransactionResult>, IOnNewTransactionResult
    {
        public OnNewTransactionResult(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOnNewTransaction_Transactions> transactions)
        {
            Transactions = transactions;
        }

        /// <summary>
        /// fetch data from the table: "Transactions"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOnNewTransaction_Transactions> Transactions { get; }

        public virtual global::System.Boolean Equals(OnNewTransactionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Transactions, other.Transactions));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnNewTransactionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Transactions_elm in Transactions)
                {
                    hash ^= 397 * Transactions_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewTransaction_Transactions_Transactions : global::System.IEquatable<OnNewTransaction_Transactions_Transactions>, IOnNewTransaction_Transactions_Transactions
    {
        public OnNewTransaction_Transactions_Transactions(global::System.Double amount, global::System.String? createdAt, global::System.String creditorIBAN, global::System.String debitorIBAN, global::System.Int32 id)
        {
            Amount = amount;
            CreatedAt = createdAt;
            CreditorIBAN = creditorIBAN;
            DebitorIBAN = debitorIBAN;
            Id = id;
        }

        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String DebitorIBAN { get; }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(OnNewTransaction_Transactions_Transactions? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Amount == other.Amount) && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && CreditorIBAN.Equals(other.CreditorIBAN) && DebitorIBAN.Equals(other.DebitorIBAN) && Id == other.Id;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnNewTransaction_Transactions_Transactions)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Amount.GetHashCode();
                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                hash ^= 397 * CreditorIBAN.GetHashCode();
                hash ^= 397 * DebitorIBAN.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewTransactionResult
    {
        /// <summary>
        /// fetch data from the table: "Transactions"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOnNewTransaction_Transactions> Transactions { get; }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewTransaction_Transactions
    {
        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String DebitorIBAN { get; }

        public global::System.Int32 Id { get; }
    }

    /// <summary>
    /// columns and relationships of "Transactions"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewTransaction_Transactions_Transactions : IOnNewTransaction_Transactions
    {
    }

    /// <summary>
    /// mutation root
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PersistPaymentResult : global::System.IEquatable<PersistPaymentResult>, IPersistPaymentResult
    {
        public PersistPaymentResult(global::StrawberryShakeClient.IPersistPayment_Insert_Payments_one? insert_Payments_One)
        {
            Insert_Payments_one = insert_Payments_One;
        }

        /// <summary>
        /// insert a single row into the table: "Payments"
        /// </summary>
        public global::StrawberryShakeClient.IPersistPayment_Insert_Payments_one? Insert_Payments_one { get; }

        public virtual global::System.Boolean Equals(PersistPaymentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Insert_Payments_one is null && other.Insert_Payments_one is null) || Insert_Payments_one != null && Insert_Payments_one.Equals(other.Insert_Payments_one)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PersistPaymentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Insert_Payments_one != null)
                {
                    hash ^= 397 * Insert_Payments_one.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PersistPayment_Insert_Payments_one_Payments : global::System.IEquatable<PersistPayment_Insert_Payments_one_Payments>, IPersistPayment_Insert_Payments_one_Payments
    {
        public PersistPayment_Insert_Payments_one_Payments(global::System.Int32 id)
        {
            Id = id;
        }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(PersistPayment_Insert_Payments_one_Payments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PersistPayment_Insert_Payments_one_Payments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// mutation root
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IPersistPaymentResult
    {
        /// <summary>
        /// insert a single row into the table: "Payments"
        /// </summary>
        public global::StrawberryShakeClient.IPersistPayment_Insert_Payments_one? Insert_Payments_one { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IPersistPayment_Insert_Payments_one
    {
        public global::System.Int32 Id { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IPersistPayment_Insert_Payments_one_Payments : IPersistPayment_Insert_Payments_one
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Payments_insert_inputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _timestamptzFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "Payments_insert_input";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
            _timestamptzFormatter = serializerResolver.GetInputValueFormatter("timestamptz");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::StrawberryShakeClient.Payments_insert_input;
            var inputInfo = runtimeValue as global::StrawberryShakeClient.State.IPayments_insert_inputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("amount", FormatAmount(input.Amount)));
            }

            if (inputInfo.IsCreatedAtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("createdAt", FormatCreatedAt(input.CreatedAt)));
            }

            if (inputInfo.IsCreditorIBANSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creditorIBAN", FormatCreditorIBAN(input.CreditorIBAN)));
            }

            if (inputInfo.IsDebitorIBANSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("debitorIBAN", FormatDebitorIBAN(input.DebitorIBAN)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            return fields;
        }

        private global::System.Object? FormatAmount(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreatedAt(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _timestamptzFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreditorIBAN(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDebitorIBAN(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }
    }

    ///<summary>input type for inserting data into table "Payments"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Payments_insert_input : global::StrawberryShakeClient.State.IPayments_insert_inputInfo, global::System.IEquatable<Payments_insert_input>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Payments_insert_input)obj);
        }

        public virtual global::System.Boolean Equals(Payments_insert_input? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Amount == other.Amount) && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && ((CreditorIBAN is null && other.CreditorIBAN is null) || CreditorIBAN != null && CreditorIBAN.Equals(other.CreditorIBAN)) && ((DebitorIBAN is null && other.DebitorIBAN is null) || DebitorIBAN != null && DebitorIBAN.Equals(other.DebitorIBAN)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Id == other.Id;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Amount != null)
                {
                    hash ^= 397 * Amount.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (CreditorIBAN != null)
                {
                    hash ^= 397 * CreditorIBAN.GetHashCode();
                }

                if (DebitorIBAN != null)
                {
                    hash ^= 397 * DebitorIBAN.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Double? _value_amount;
        private global::System.Boolean _set_amount;
        private global::System.String? _value_createdAt;
        private global::System.Boolean _set_createdAt;
        private global::System.String? _value_creditorIBAN;
        private global::System.Boolean _set_creditorIBAN;
        private global::System.String? _value_debitorIBAN;
        private global::System.Boolean _set_debitorIBAN;
        private global::System.String? _value_description;
        private global::System.Boolean _set_description;
        private global::System.Int32? _value_id;
        private global::System.Boolean _set_id;
        public global::System.Double? Amount
        {
            get => _value_amount;
            set
            {
                _set_amount = true;
                _value_amount = value;
            }
        }

        global::System.Boolean global::StrawberryShakeClient.State.IPayments_insert_inputInfo.IsAmountSet => _set_amount;
        public global::System.String? CreatedAt
        {
            get => _value_createdAt;
            set
            {
                _set_createdAt = true;
                _value_createdAt = value;
            }
        }

        global::System.Boolean global::StrawberryShakeClient.State.IPayments_insert_inputInfo.IsCreatedAtSet => _set_createdAt;
        public global::System.String? CreditorIBAN
        {
            get => _value_creditorIBAN;
            set
            {
                _set_creditorIBAN = true;
                _value_creditorIBAN = value;
            }
        }

        global::System.Boolean global::StrawberryShakeClient.State.IPayments_insert_inputInfo.IsCreditorIBANSet => _set_creditorIBAN;
        public global::System.String? DebitorIBAN
        {
            get => _value_debitorIBAN;
            set
            {
                _set_debitorIBAN = true;
                _value_debitorIBAN = value;
            }
        }

        global::System.Boolean global::StrawberryShakeClient.State.IPayments_insert_inputInfo.IsDebitorIBANSet => _set_debitorIBAN;
        public global::System.String? Description
        {
            get => _value_description;
            set
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::StrawberryShakeClient.State.IPayments_insert_inputInfo.IsDescriptionSet => _set_description;
        public global::System.Int32? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::StrawberryShakeClient.State.IPayments_insert_inputInfo.IsIdSet => _set_id;
    }

    /// <summary>
    /// Represents the operation service of the OnNewPayment GraphQL operation
    /// <code>
    /// subscription OnNewPayment {
    ///   Payments(order_by: { createdAt: desc }, limit: 1) {
    ///     __typename
    ///     amount
    ///     createdAt
    ///     creditorIBAN
    ///     debitorIBAN
    ///     description
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnNewPaymentSubscriptionDocument()
        {
        }

        public static OnNewPaymentSubscriptionDocument Instance { get; } = new OnNewPaymentSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x20, 0x64, 0x65, 0x73, 0x63, 0x20, 0x7d, 0x2c, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x31, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x42, 0x41, 0x4e, 0x20, 0x64, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x42, 0x41, 0x4e, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7dbb2412c9d8d642d0ac9647d0e9412e");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnNewPayment GraphQL operation
    /// <code>
    /// subscription OnNewPayment {
    ///   Payments(order_by: { createdAt: desc }, limit: 1) {
    ///     __typename
    ///     amount
    ///     createdAt
    ///     creditorIBAN
    ///     debitorIBAN
    ///     description
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentSubscription : global::StrawberryShakeClient.IOnNewPaymentSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnNewPaymentResult> _operationExecutor;
        public OnNewPaymentSubscription(global::StrawberryShake.IOperationExecutor<IOnNewPaymentResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnNewPaymentResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnNewPaymentResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnNewPaymentSubscriptionDocument.Instance.Hash.Value, name: "OnNewPayment", document: OnNewPaymentSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the OnNewPayment GraphQL operation
    /// <code>
    /// subscription OnNewPayment {
    ///   Payments(order_by: { createdAt: desc }, limit: 1) {
    ///     __typename
    ///     amount
    ///     createdAt
    ///     creditorIBAN
    ///     debitorIBAN
    ///     description
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewPaymentSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnNewPaymentResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the OnNewTransaction GraphQL operation
    /// <code>
    /// subscription OnNewTransaction {
    ///   Transactions(order_by: { createdAt: desc }, limit: 1) {
    ///     __typename
    ///     amount
    ///     createdAt
    ///     creditorIBAN
    ///     debitorIBAN
    ///     id
    ///     ... on Transactions {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewTransactionSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnNewTransactionSubscriptionDocument()
        {
        }

        public static OnNewTransactionSubscriptionDocument Instance { get; } = new OnNewTransactionSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x20, 0x64, 0x65, 0x73, 0x63, 0x20, 0x7d, 0x2c, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x31, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x42, 0x41, 0x4e, 0x20, 0x64, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x42, 0x41, 0x4e, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a9800fcb33b8d513194cdfa1786e50f4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnNewTransaction GraphQL operation
    /// <code>
    /// subscription OnNewTransaction {
    ///   Transactions(order_by: { createdAt: desc }, limit: 1) {
    ///     __typename
    ///     amount
    ///     createdAt
    ///     creditorIBAN
    ///     debitorIBAN
    ///     id
    ///     ... on Transactions {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewTransactionSubscription : global::StrawberryShakeClient.IOnNewTransactionSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnNewTransactionResult> _operationExecutor;
        public OnNewTransactionSubscription(global::StrawberryShake.IOperationExecutor<IOnNewTransactionResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnNewTransactionResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnNewTransactionResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnNewTransactionSubscriptionDocument.Instance.Hash.Value, name: "OnNewTransaction", document: OnNewTransactionSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the OnNewTransaction GraphQL operation
    /// <code>
    /// subscription OnNewTransaction {
    ///   Transactions(order_by: { createdAt: desc }, limit: 1) {
    ///     __typename
    ///     amount
    ///     createdAt
    ///     creditorIBAN
    ///     debitorIBAN
    ///     id
    ///     ... on Transactions {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewTransactionSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnNewTransactionResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PersistPayment GraphQL operation
    /// <code>
    /// mutation PersistPayment($payment: Payments_insert_input!) {
    ///   insert_Payments_one(object: $payment) {
    ///     __typename
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PersistPaymentMutationDocument : global::StrawberryShake.IDocument
    {
        private PersistPaymentMutationDocument()
        {
        }

        public static PersistPaymentMutationDocument Instance { get; } = new PersistPaymentMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x28, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "90b5cba09a2e35095472384579956e50");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PersistPayment GraphQL operation
    /// <code>
    /// mutation PersistPayment($payment: Payments_insert_input!) {
    ///   insert_Payments_one(object: $payment) {
    ///     __typename
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PersistPaymentMutation : global::StrawberryShakeClient.IPersistPaymentMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPersistPaymentResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _payments_Insert_InputFormatter;
        public PersistPaymentMutation(global::StrawberryShake.IOperationExecutor<IPersistPaymentResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _payments_Insert_InputFormatter = serializerResolver.GetInputValueFormatter("Payments_insert_input");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPersistPaymentResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPersistPaymentResult>> ExecuteAsync(global::StrawberryShakeClient.Payments_insert_input payment, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(payment);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPersistPaymentResult>> Watch(global::StrawberryShakeClient.Payments_insert_input payment, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(payment);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::StrawberryShakeClient.Payments_insert_input payment)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("payment", FormatPayment(payment));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PersistPaymentMutationDocument.Instance.Hash.Value, name: "PersistPayment", document: PersistPaymentMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPayment(global::StrawberryShakeClient.Payments_insert_input value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _payments_Insert_InputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PersistPayment GraphQL operation
    /// <code>
    /// mutation PersistPayment($payment: Payments_insert_input!) {
    ///   insert_Payments_one(object: $payment) {
    ///     __typename
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IPersistPaymentMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPersistPaymentResult>> ExecuteAsync(global::StrawberryShakeClient.Payments_insert_input payment, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPersistPaymentResult>> Watch(global::StrawberryShakeClient.Payments_insert_input payment, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the StrawberryShakeClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class StrawberryShakeClient : global::StrawberryShakeClient.IStrawberryShakeClient
    {
        private readonly global::StrawberryShakeClient.IOnNewPaymentSubscription _onNewPayment;
        private readonly global::StrawberryShakeClient.IOnNewTransactionSubscription _onNewTransaction;
        private readonly global::StrawberryShakeClient.IPersistPaymentMutation _persistPayment;
        public StrawberryShakeClient(global::StrawberryShakeClient.IOnNewPaymentSubscription onNewPayment, global::StrawberryShakeClient.IOnNewTransactionSubscription onNewTransaction, global::StrawberryShakeClient.IPersistPaymentMutation persistPayment)
        {
            _onNewPayment = onNewPayment ?? throw new global::System.ArgumentNullException(nameof(onNewPayment));
            _onNewTransaction = onNewTransaction ?? throw new global::System.ArgumentNullException(nameof(onNewTransaction));
            _persistPayment = persistPayment ?? throw new global::System.ArgumentNullException(nameof(persistPayment));
        }

        public static global::System.String ClientName => "StrawberryShakeClient";
        public global::StrawberryShakeClient.IOnNewPaymentSubscription OnNewPayment => _onNewPayment;
        public global::StrawberryShakeClient.IOnNewTransactionSubscription OnNewTransaction => _onNewTransaction;
        public global::StrawberryShakeClient.IPersistPaymentMutation PersistPayment => _persistPayment;
    }

    /// <summary>
    /// Represents the StrawberryShakeClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IStrawberryShakeClient
    {
        global::StrawberryShakeClient.IOnNewPaymentSubscription OnNewPayment { get; }

        global::StrawberryShakeClient.IOnNewTransactionSubscription OnNewTransaction { get; }

        global::StrawberryShakeClient.IPersistPaymentMutation PersistPayment { get; }
    }
}

namespace StrawberryShakeClient.State
{
    ///<summary>columns and relationships of "Payments"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PaymentsEntity
    {
        public PaymentsEntity(global::System.Double amount = default !, global::System.String? createdAt = default !, global::System.String creditorIBAN = default !, global::System.String debitorIBAN = default !, global::System.String description = default !, global::System.Int32 id = default !)
        {
            Amount = amount;
            CreatedAt = createdAt;
            CreditorIBAN = creditorIBAN;
            DebitorIBAN = debitorIBAN;
            Description = description;
            Id = id;
        }

        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String DebitorIBAN { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Id { get; }
    }

    ///<summary>columns and relationships of "Transactions"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class TransactionsEntity
    {
        public TransactionsEntity(global::System.Double amount = default !, global::System.String? createdAt = default !, global::System.String creditorIBAN = default !, global::System.String debitorIBAN = default !, global::System.Int32 id = default !)
        {
            Amount = amount;
            CreatedAt = createdAt;
            CreditorIBAN = creditorIBAN;
            DebitorIBAN = debitorIBAN;
            Id = id;
        }

        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String DebitorIBAN { get; }

        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.OnNewPaymentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.PaymentsEntity, OnNewPayment_Payments_Payments> _onNewPayment_Payments_PaymentsFromPaymentsEntityMapper;
        public OnNewPaymentResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.PaymentsEntity, OnNewPayment_Payments_Payments> onNewPayment_Payments_PaymentsFromPaymentsEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onNewPayment_Payments_PaymentsFromPaymentsEntityMapper = onNewPayment_Payments_PaymentsFromPaymentsEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onNewPayment_Payments_PaymentsFromPaymentsEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::StrawberryShakeClient.IOnNewPaymentResult);
        public OnNewPaymentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnNewPaymentResultInfo info)
            {
                return new OnNewPaymentResult(MapNonNullableIOnNewPayment_PaymentsNonNullableArray(info.Payments, snapshot));
            }

            throw new global::System.ArgumentException("OnNewPaymentResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOnNewPayment_Payments> MapNonNullableIOnNewPayment_PaymentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var paymentss = new global::System.Collections.Generic.List<global::StrawberryShakeClient.IOnNewPayment_Payments>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                paymentss.Add(MapNonNullableIOnNewPayment_Payments(child, snapshot));
            }

            return paymentss;
        }

        private global::StrawberryShakeClient.IOnNewPayment_Payments MapNonNullableIOnNewPayment_Payments(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Payments", global::System.StringComparison.Ordinal))
            {
                return _onNewPayment_Payments_PaymentsFromPaymentsEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeClient.State.PaymentsEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnNewPaymentResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> payments, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Payments = payments;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Payments { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnNewPaymentResultInfo(Payments, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPayment_Payments_PaymentsFromPaymentsEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.PaymentsEntity, OnNewPayment_Payments_Payments>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnNewPayment_Payments_PaymentsFromPaymentsEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public OnNewPayment_Payments_Payments Map(global::StrawberryShakeClient.State.PaymentsEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnNewPayment_Payments_Payments(entity.Amount, entity.CreatedAt, entity.CreditorIBAN, entity.DebitorIBAN, entity.Description, entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewTransactionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.OnNewTransactionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.TransactionsEntity, OnNewTransaction_Transactions_Transactions> _onNewTransaction_Transactions_TransactionsFromTransactionsEntityMapper;
        public OnNewTransactionResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.TransactionsEntity, OnNewTransaction_Transactions_Transactions> onNewTransaction_Transactions_TransactionsFromTransactionsEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onNewTransaction_Transactions_TransactionsFromTransactionsEntityMapper = onNewTransaction_Transactions_TransactionsFromTransactionsEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onNewTransaction_Transactions_TransactionsFromTransactionsEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::StrawberryShakeClient.IOnNewTransactionResult);
        public OnNewTransactionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnNewTransactionResultInfo info)
            {
                return new OnNewTransactionResult(MapNonNullableIOnNewTransaction_TransactionsNonNullableArray(info.Transactions, snapshot));
            }

            throw new global::System.ArgumentException("OnNewTransactionResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShakeClient.IOnNewTransaction_Transactions> MapNonNullableIOnNewTransaction_TransactionsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var transactionss = new global::System.Collections.Generic.List<global::StrawberryShakeClient.IOnNewTransaction_Transactions>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                transactionss.Add(MapNonNullableIOnNewTransaction_Transactions(child, snapshot));
            }

            return transactionss;
        }

        private global::StrawberryShakeClient.IOnNewTransaction_Transactions MapNonNullableIOnNewTransaction_Transactions(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Transactions", global::System.StringComparison.Ordinal))
            {
                return _onNewTransaction_Transactions_TransactionsFromTransactionsEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeClient.State.TransactionsEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewTransactionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnNewTransactionResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> transactions, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Transactions = transactions;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// fetch data from the table: "Transactions"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Transactions { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnNewTransactionResultInfo(Transactions, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewTransaction_Transactions_TransactionsFromTransactionsEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.TransactionsEntity, OnNewTransaction_Transactions_Transactions>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnNewTransaction_Transactions_TransactionsFromTransactionsEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public OnNewTransaction_Transactions_Transactions Map(global::StrawberryShakeClient.State.TransactionsEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnNewTransaction_Transactions_Transactions(entity.Amount, entity.CreatedAt, entity.CreditorIBAN, entity.DebitorIBAN, entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PersistPaymentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.PersistPaymentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.PaymentsEntity, PersistPayment_Insert_Payments_one_Payments> _persistPayment_Insert_Payments_One_PaymentsFromPaymentsEntityMapper;
        public PersistPaymentResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.PaymentsEntity, PersistPayment_Insert_Payments_one_Payments> persistPayment_Insert_Payments_One_PaymentsFromPaymentsEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _persistPayment_Insert_Payments_One_PaymentsFromPaymentsEntityMapper = persistPayment_Insert_Payments_One_PaymentsFromPaymentsEntityMapper ?? throw new global::System.ArgumentNullException(nameof(persistPayment_Insert_Payments_One_PaymentsFromPaymentsEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::StrawberryShakeClient.IPersistPaymentResult);
        public PersistPaymentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PersistPaymentResultInfo info)
            {
                return new PersistPaymentResult(MapIPersistPayment_Insert_Payments_one(info.Insert_Payments_one, snapshot));
            }

            throw new global::System.ArgumentException("PersistPaymentResultInfo expected.");
        }

        private global::StrawberryShakeClient.IPersistPayment_Insert_Payments_one? MapIPersistPayment_Insert_Payments_one(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Payments", global::System.StringComparison.Ordinal))
            {
                return _persistPayment_Insert_Payments_One_PaymentsFromPaymentsEntityMapper.Map(snapshot.GetEntity<global::StrawberryShakeClient.State.PaymentsEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PersistPaymentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PersistPaymentResultInfo(global::StrawberryShake.EntityId? insert_Payments_One, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Insert_Payments_one = insert_Payments_One;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// insert a single row into the table: "Payments"
        /// </summary>
        public global::StrawberryShake.EntityId? Insert_Payments_one { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PersistPaymentResultInfo(Insert_Payments_one, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PersistPayment_Insert_Payments_one_PaymentsFromPaymentsEntityMapper : global::StrawberryShake.IEntityMapper<global::StrawberryShakeClient.State.PaymentsEntity, PersistPayment_Insert_Payments_one_Payments>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PersistPayment_Insert_Payments_one_PaymentsFromPaymentsEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public PersistPayment_Insert_Payments_one_Payments Map(global::StrawberryShakeClient.State.PaymentsEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new PersistPayment_Insert_Payments_one_Payments(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    internal interface IPayments_insert_inputInfo
    {
        global::System.Boolean IsAmountSet { get; }

        global::System.Boolean IsCreatedAtSet { get; }

        global::System.Boolean IsCreditorIBANSet { get; }

        global::System.Boolean IsDebitorIBANSet { get; }

        global::System.Boolean IsDescriptionSet { get; }

        global::System.Boolean IsIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOnNewPaymentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOnNewPaymentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public OnNewPaymentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOnNewPaymentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IOnNewPaymentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOnNewPaymentResult Result, OnNewPaymentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IOnNewPaymentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOnNewPaymentResult, OnNewPaymentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> paymentsId = default !;
            _entityStore.Update(session =>
            {
                paymentsId = UpdateNonNullableIOnNewPayment_PaymentsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Payments"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OnNewPaymentResultInfo(paymentsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIOnNewPayment_PaymentsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var paymentss = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                paymentss.Add(UpdateNonNullableIOnNewPayment_PaymentsEntity(session, child, entityIds));
            }

            return paymentss;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIOnNewPayment_PaymentsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Payments", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeClient.State.PaymentsEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.PaymentsEntity(DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creditorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "debitorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.PaymentsEntity(DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creditorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "debitorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _timestamptzParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewTransactionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IOnNewTransactionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOnNewTransactionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public OnNewTransactionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IOnNewTransactionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IOnNewTransactionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOnNewTransactionResult Result, OnNewTransactionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IOnNewTransactionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOnNewTransactionResult, OnNewTransactionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> transactionsId = default !;
            _entityStore.Update(session =>
            {
                transactionsId = UpdateNonNullableIOnNewTransaction_TransactionsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Transactions"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OnNewTransactionResultInfo(transactionsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIOnNewTransaction_TransactionsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var transactionss = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                transactionss.Add(UpdateNonNullableIOnNewTransaction_TransactionsEntity(session, child, entityIds));
            }

            return transactionss;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIOnNewTransaction_TransactionsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Transactions", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeClient.State.TransactionsEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.TransactionsEntity(DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creditorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "debitorIBAN")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.TransactionsEntity(DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creditorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "debitorIBAN")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _timestamptzParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PersistPaymentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::StrawberryShakeClient.IPersistPaymentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IPersistPaymentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public PersistPaymentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::StrawberryShakeClient.IPersistPaymentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IPersistPaymentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPersistPaymentResult Result, PersistPaymentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPersistPaymentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPersistPaymentResult, PersistPaymentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? insert_Payments_OneId = default !;
            _entityStore.Update(session =>
            {
                insert_Payments_OneId = UpdateIPersistPayment_Insert_Payments_oneEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "insert_Payments_one"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PersistPaymentResultInfo(insert_Payments_OneId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIPersistPayment_Insert_Payments_oneEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Payments", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::StrawberryShakeClient.State.PaymentsEntity? entity))
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.PaymentsEntity(entity.Amount, entity.CreatedAt, entity.CreditorIBAN, entity.DebitorIBAN, entity.Description, DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::StrawberryShakeClient.State.PaymentsEntity(default !, default !, default !, default !, default !, DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class StrawberryShakeClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Payments" => ParsePaymentsEntityId(obj, __typename),
                "Transactions" => ParseTransactionsEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Payments" => FormatPaymentsEntityId(entityId),
                "Transactions" => FormatTransactionsEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParsePaymentsEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatPaymentsEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTransactionsEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatTransactionsEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class StrawberryShakeClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public StrawberryShakeClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
