// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public static partial class StrawberryShakeClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::SFR_ReactiveSystems.TransactionService.State.StrawberryShakeClientStoreAccessor> AddStrawberryShakeClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::SFR_ReactiveSystems.TransactionService.State.StrawberryShakeClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SFR_ReactiveSystems.TransactionService.OnNewPaymentSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SFR_ReactiveSystems.TransactionService.GetAllPaymentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SFR_ReactiveSystems.TransactionService.StrawberryShakeClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SFR_ReactiveSystems.TransactionService.IStrawberryShakeClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::SFR_ReactiveSystems.TransactionService.State.StrawberryShakeClientStoreAccessor>("StrawberryShakeClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("StrawberryShakeClient", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("StrawberryShakeClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity, global::SFR_ReactiveSystems.TransactionService.OnNewPayment_Payments_Payments>, global::SFR_ReactiveSystems.TransactionService.State.OnNewPayment_Payments_PaymentsFromPaymentsEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity, global::SFR_ReactiveSystems.TransactionService.GetAllPayments_Payments_Payments>, global::SFR_ReactiveSystems.TransactionService.State.GetAllPayments_Payments_PaymentsFromPaymentsEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("timestamptz"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentResult>, global::SFR_ReactiveSystems.TransactionService.State.OnNewPaymentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentResult>, global::SFR_ReactiveSystems.TransactionService.State.OnNewPaymentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SFR_ReactiveSystems.TransactionService.OnNewPaymentSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SFR_ReactiveSystems.TransactionService.OnNewPaymentSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsResult>, global::SFR_ReactiveSystems.TransactionService.State.GetAllPaymentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsResult>, global::SFR_ReactiveSystems.TransactionService.State.GetAllPaymentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SFR_ReactiveSystems.TransactionService.GetAllPaymentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SFR_ReactiveSystems.TransactionService.GetAllPaymentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::SFR_ReactiveSystems.TransactionService.State.StrawberryShakeClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SFR_ReactiveSystems.TransactionService.StrawberryShakeClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SFR_ReactiveSystems.TransactionService.IStrawberryShakeClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SFR_ReactiveSystems.TransactionService.StrawberryShakeClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace SFR_ReactiveSystems.TransactionService
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentResult : global::System.IEquatable<OnNewPaymentResult>, IOnNewPaymentResult
    {
        public OnNewPaymentResult(global::System.Collections.Generic.IReadOnlyList<global::SFR_ReactiveSystems.TransactionService.IOnNewPayment_Payments> payments)
        {
            Payments = payments;
        }

        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::SFR_ReactiveSystems.TransactionService.IOnNewPayment_Payments> Payments { get; }

        public virtual global::System.Boolean Equals(OnNewPaymentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Payments, other.Payments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnNewPaymentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Payments_elm in Payments)
                {
                    hash ^= 397 * Payments_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPayment_Payments_Payments : global::System.IEquatable<OnNewPayment_Payments_Payments>, IOnNewPayment_Payments_Payments
    {
        public OnNewPayment_Payments_Payments(global::System.Double amount, global::System.String? createdAt, global::System.String creditorIBAN, global::System.String debitorIBAN, global::System.String description, global::System.Int32 id)
        {
            Amount = amount;
            CreatedAt = createdAt;
            CreditorIBAN = creditorIBAN;
            DebitorIBAN = debitorIBAN;
            Description = description;
            Id = id;
        }

        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String DebitorIBAN { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(OnNewPayment_Payments_Payments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Amount == other.Amount) && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && CreditorIBAN.Equals(other.CreditorIBAN) && DebitorIBAN.Equals(other.DebitorIBAN) && Description.Equals(other.Description) && Id == other.Id;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnNewPayment_Payments_Payments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Amount.GetHashCode();
                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                hash ^= 397 * CreditorIBAN.GetHashCode();
                hash ^= 397 * DebitorIBAN.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewPaymentResult
    {
        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::SFR_ReactiveSystems.TransactionService.IOnNewPayment_Payments> Payments { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewPayment_Payments
    {
        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String DebitorIBAN { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Id { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewPayment_Payments_Payments : IOnNewPayment_Payments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAllPaymentsResult : global::System.IEquatable<GetAllPaymentsResult>, IGetAllPaymentsResult
    {
        public GetAllPaymentsResult(global::System.Collections.Generic.IReadOnlyList<global::SFR_ReactiveSystems.TransactionService.IGetAllPayments_Payments> payments)
        {
            Payments = payments;
        }

        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::SFR_ReactiveSystems.TransactionService.IGetAllPayments_Payments> Payments { get; }

        public virtual global::System.Boolean Equals(GetAllPaymentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Payments, other.Payments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPaymentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Payments_elm in Payments)
                {
                    hash ^= 397 * Payments_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAllPayments_Payments_Payments : global::System.IEquatable<GetAllPayments_Payments_Payments>, IGetAllPayments_Payments_Payments
    {
        public GetAllPayments_Payments_Payments(global::System.String debitorIBAN, global::System.String creditorIBAN, global::System.String description, global::System.Double amount, global::System.String? createdAt, global::System.Int32 id)
        {
            DebitorIBAN = debitorIBAN;
            CreditorIBAN = creditorIBAN;
            Description = description;
            Amount = amount;
            CreatedAt = createdAt;
            Id = id;
        }

        public global::System.String DebitorIBAN { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String Description { get; }

        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.Int32 Id { get; }

        public virtual global::System.Boolean Equals(GetAllPayments_Payments_Payments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DebitorIBAN.Equals(other.DebitorIBAN)) && CreditorIBAN.Equals(other.CreditorIBAN) && Description.Equals(other.Description) && Amount == other.Amount && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && Id == other.Id;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPayments_Payments_Payments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DebitorIBAN.GetHashCode();
                hash ^= 397 * CreditorIBAN.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                hash ^= 397 * Amount.GetHashCode();
                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetAllPaymentsResult
    {
        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::SFR_ReactiveSystems.TransactionService.IGetAllPayments_Payments> Payments { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetAllPayments_Payments
    {
        public global::System.String DebitorIBAN { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String Description { get; }

        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.Int32 Id { get; }
    }

    /// <summary>
    /// columns and relationships of "Payments"
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetAllPayments_Payments_Payments : IGetAllPayments_Payments
    {
    }

    /// <summary>
    /// Represents the operation service of the OnNewPayment GraphQL operation
    /// <code>
    /// subscription OnNewPayment {
    ///   Payments(order_by: { createdAt: desc }, limit: 1) {
    ///     __typename
    ///     amount
    ///     createdAt
    ///     creditorIBAN
    ///     debitorIBAN
    ///     description
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnNewPaymentSubscriptionDocument()
        {
        }

        public static OnNewPaymentSubscriptionDocument Instance { get; } = new OnNewPaymentSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x20, 0x64, 0x65, 0x73, 0x63, 0x20, 0x7d, 0x2c, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x31, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x42, 0x41, 0x4e, 0x20, 0x64, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x42, 0x41, 0x4e, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7dbb2412c9d8d642d0ac9647d0e9412e");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnNewPayment GraphQL operation
    /// <code>
    /// subscription OnNewPayment {
    ///   Payments(order_by: { createdAt: desc }, limit: 1) {
    ///     __typename
    ///     amount
    ///     createdAt
    ///     creditorIBAN
    ///     debitorIBAN
    ///     description
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentSubscription : global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnNewPaymentResult> _operationExecutor;
        public OnNewPaymentSubscription(global::StrawberryShake.IOperationExecutor<IOnNewPaymentResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnNewPaymentResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnNewPaymentResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnNewPaymentSubscriptionDocument.Instance.Hash.Value, name: "OnNewPayment", document: OnNewPaymentSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the OnNewPayment GraphQL operation
    /// <code>
    /// subscription OnNewPayment {
    ///   Payments(order_by: { createdAt: desc }, limit: 1) {
    ///     __typename
    ///     amount
    ///     createdAt
    ///     creditorIBAN
    ///     debitorIBAN
    ///     description
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IOnNewPaymentSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnNewPaymentResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetAllPayments GraphQL operation
    /// <code>
    /// query GetAllPayments {
    ///   Payments {
    ///     __typename
    ///     debitorIBAN
    ///     creditorIBAN
    ///     description
    ///     amount
    ///     createdAt
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAllPaymentsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAllPaymentsQueryDocument()
        {
        }

        public static GetAllPaymentsQueryDocument Instance { get; } = new GetAllPaymentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x42, 0x41, 0x4e, 0x20, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x42, 0x41, 0x4e, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8477a5341d65f1eee8c5fd6d6f00fcc5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllPayments GraphQL operation
    /// <code>
    /// query GetAllPayments {
    ///   Payments {
    ///     __typename
    ///     debitorIBAN
    ///     creditorIBAN
    ///     description
    ///     amount
    ///     createdAt
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAllPaymentsQuery : global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAllPaymentsResult> _operationExecutor;
        public GetAllPaymentsQuery(global::StrawberryShake.IOperationExecutor<IGetAllPaymentsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllPaymentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllPaymentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllPaymentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAllPaymentsQueryDocument.Instance.Hash.Value, name: "GetAllPayments", document: GetAllPaymentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllPayments GraphQL operation
    /// <code>
    /// query GetAllPayments {
    ///   Payments {
    ///     __typename
    ///     debitorIBAN
    ///     creditorIBAN
    ///     description
    ///     amount
    ///     createdAt
    ///     id
    ///     ... on Payments {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IGetAllPaymentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllPaymentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllPaymentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the StrawberryShakeClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class StrawberryShakeClient : global::SFR_ReactiveSystems.TransactionService.IStrawberryShakeClient
    {
        private readonly global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentSubscription _onNewPayment;
        private readonly global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsQuery _getAllPayments;
        public StrawberryShakeClient(global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentSubscription onNewPayment, global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsQuery getAllPayments)
        {
            _onNewPayment = onNewPayment ?? throw new global::System.ArgumentNullException(nameof(onNewPayment));
            _getAllPayments = getAllPayments ?? throw new global::System.ArgumentNullException(nameof(getAllPayments));
        }

        public static global::System.String ClientName => "StrawberryShakeClient";
        public global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentSubscription OnNewPayment => _onNewPayment;
        public global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsQuery GetAllPayments => _getAllPayments;
    }

    /// <summary>
    /// Represents the StrawberryShakeClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IStrawberryShakeClient
    {
        global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentSubscription OnNewPayment { get; }

        global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsQuery GetAllPayments { get; }
    }
}

namespace SFR_ReactiveSystems.TransactionService.State
{
    ///<summary>columns and relationships of "Payments"</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PaymentsEntity
    {
        public PaymentsEntity(global::System.Double amount = default !, global::System.String? createdAt = default !, global::System.String creditorIBAN = default !, global::System.String debitorIBAN = default !, global::System.String description = default !, global::System.Int32 id = default !)
        {
            Amount = amount;
            CreatedAt = createdAt;
            CreditorIBAN = creditorIBAN;
            DebitorIBAN = debitorIBAN;
            Description = description;
            Id = id;
        }

        public global::System.Double Amount { get; }

        public global::System.String? CreatedAt { get; }

        public global::System.String CreditorIBAN { get; }

        public global::System.String DebitorIBAN { get; }

        public global::System.String Description { get; }

        public global::System.Int32 Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::SFR_ReactiveSystems.TransactionService.OnNewPaymentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity, OnNewPayment_Payments_Payments> _onNewPayment_Payments_PaymentsFromPaymentsEntityMapper;
        public OnNewPaymentResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity, OnNewPayment_Payments_Payments> onNewPayment_Payments_PaymentsFromPaymentsEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onNewPayment_Payments_PaymentsFromPaymentsEntityMapper = onNewPayment_Payments_PaymentsFromPaymentsEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onNewPayment_Payments_PaymentsFromPaymentsEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentResult);
        public OnNewPaymentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnNewPaymentResultInfo info)
            {
                return new OnNewPaymentResult(MapNonNullableIOnNewPayment_PaymentsNonNullableArray(info.Payments, snapshot));
            }

            throw new global::System.ArgumentException("OnNewPaymentResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::SFR_ReactiveSystems.TransactionService.IOnNewPayment_Payments> MapNonNullableIOnNewPayment_PaymentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var paymentss = new global::System.Collections.Generic.List<global::SFR_ReactiveSystems.TransactionService.IOnNewPayment_Payments>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                paymentss.Add(MapNonNullableIOnNewPayment_Payments(child, snapshot));
            }

            return paymentss;
        }

        private global::SFR_ReactiveSystems.TransactionService.IOnNewPayment_Payments MapNonNullableIOnNewPayment_Payments(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Payments", global::System.StringComparison.Ordinal))
            {
                return _onNewPayment_Payments_PaymentsFromPaymentsEntityMapper.Map(snapshot.GetEntity<global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnNewPaymentResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> payments, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Payments = payments;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Payments { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnNewPaymentResultInfo(Payments, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPayment_Payments_PaymentsFromPaymentsEntityMapper : global::StrawberryShake.IEntityMapper<global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity, OnNewPayment_Payments_Payments>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnNewPayment_Payments_PaymentsFromPaymentsEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public OnNewPayment_Payments_Payments Map(global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnNewPayment_Payments_Payments(entity.Amount, entity.CreatedAt, entity.CreditorIBAN, entity.DebitorIBAN, entity.Description, entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAllPaymentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::SFR_ReactiveSystems.TransactionService.GetAllPaymentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity, GetAllPayments_Payments_Payments> _getAllPayments_Payments_PaymentsFromPaymentsEntityMapper;
        public GetAllPaymentsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity, GetAllPayments_Payments_Payments> getAllPayments_Payments_PaymentsFromPaymentsEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAllPayments_Payments_PaymentsFromPaymentsEntityMapper = getAllPayments_Payments_PaymentsFromPaymentsEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAllPayments_Payments_PaymentsFromPaymentsEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsResult);
        public GetAllPaymentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAllPaymentsResultInfo info)
            {
                return new GetAllPaymentsResult(MapNonNullableIGetAllPayments_PaymentsNonNullableArray(info.Payments, snapshot));
            }

            throw new global::System.ArgumentException("GetAllPaymentsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::SFR_ReactiveSystems.TransactionService.IGetAllPayments_Payments> MapNonNullableIGetAllPayments_PaymentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var paymentss = new global::System.Collections.Generic.List<global::SFR_ReactiveSystems.TransactionService.IGetAllPayments_Payments>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                paymentss.Add(MapNonNullableIGetAllPayments_Payments(child, snapshot));
            }

            return paymentss;
        }

        private global::SFR_ReactiveSystems.TransactionService.IGetAllPayments_Payments MapNonNullableIGetAllPayments_Payments(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Payments", global::System.StringComparison.Ordinal))
            {
                return _getAllPayments_Payments_PaymentsFromPaymentsEntityMapper.Map(snapshot.GetEntity<global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAllPaymentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAllPaymentsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> payments, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Payments = payments;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// fetch data from the table: "Payments"
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Payments { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAllPaymentsResultInfo(Payments, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAllPayments_Payments_PaymentsFromPaymentsEntityMapper : global::StrawberryShake.IEntityMapper<global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity, GetAllPayments_Payments_Payments>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAllPayments_Payments_PaymentsFromPaymentsEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetAllPayments_Payments_Payments Map(global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAllPayments_Payments_Payments(entity.DebitorIBAN, entity.CreditorIBAN, entity.Description, entity.Amount, entity.CreatedAt, entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class OnNewPaymentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public OnNewPaymentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::SFR_ReactiveSystems.TransactionService.IOnNewPaymentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IOnNewPaymentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IOnNewPaymentResult Result, OnNewPaymentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IOnNewPaymentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IOnNewPaymentResult, OnNewPaymentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> paymentsId = default !;
            _entityStore.Update(session =>
            {
                paymentsId = UpdateNonNullableIOnNewPayment_PaymentsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Payments"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new OnNewPaymentResultInfo(paymentsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIOnNewPayment_PaymentsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var paymentss = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                paymentss.Add(UpdateNonNullableIOnNewPayment_PaymentsEntity(session, child, entityIds));
            }

            return paymentss;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIOnNewPayment_PaymentsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Payments", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity? entity))
                {
                    session.SetEntity(entityId, new global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity(DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creditorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "debitorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity(DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creditorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "debitorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _timestamptzParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class GetAllPaymentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _timestamptzParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetAllPaymentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::SFR_ReactiveSystems.TransactionService.IGetAllPaymentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _timestamptzParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("timestamptz") ?? throw new global::System.ArgumentException("No serializer for type `timestamptz` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAllPaymentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAllPaymentsResult Result, GetAllPaymentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetAllPaymentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAllPaymentsResult, GetAllPaymentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> paymentsId = default !;
            _entityStore.Update(session =>
            {
                paymentsId = UpdateNonNullableIGetAllPayments_PaymentsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Payments"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAllPaymentsResultInfo(paymentsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetAllPayments_PaymentsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var paymentss = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                paymentss.Add(UpdateNonNullableIGetAllPayments_PaymentsEntity(session, child, entityIds));
            }

            return paymentss;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetAllPayments_PaymentsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Payments", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity? entity))
                {
                    session.SetEntity(entityId, new global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity(DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creditorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "debitorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::SFR_ReactiveSystems.TransactionService.State.PaymentsEntity(DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "creditorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "debitorIBAN")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _timestamptzParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class StrawberryShakeClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Payments" => ParsePaymentsEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Payments" => FormatPaymentsEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParsePaymentsEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatPaymentsEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class StrawberryShakeClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public StrawberryShakeClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
